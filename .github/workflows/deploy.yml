name: Build and Deploy Bot

on:
  push:
    tags:
      - "1.*.*"

  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to deploy"
        required: true
        default: ""

jobs:
  checks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read Python version
        id: python_version
        run: |
          echo "PYTHON_VERSION=$(cat .python-version)" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "${{ env.PYTHON_VERSION }}"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt

      - name: Format check
        run: |
          black --check .

      - name: Import order check
        run: |
          isort --check-only .

      - name: Linting check
        run: |
          flake8 .

  build:
    runs-on: ubuntu-latest
    environment: production
    needs: checks

    steps:
      - name: Set up Docker image tags
        id: vars
        run: |
          echo "TAG_VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Load 1password secrets
        uses: 1password/load-secrets-action@v1
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          DOCKER_USERNAME: "op://elon-gpt/github-secrets/DOCKER_USERNAME"
          DOCKER_PASSWORD: "op://elon-gpt/github-secrets/DOCKER_PASSWORD"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and push docker image
        run: |
          docker build --no-cache -t ${{ env.DOCKER_USERNAME }}/elongpt-v2:${{ env.TAG_VERSION }} .
          docker push ${{ env.DOCKER_USERNAME }}/elongpt-v2:${{ env.TAG_VERSION }}

  deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: build

    steps:
      - name: Set up Docker image tags
        id: vars
        run: |
          echo "TAG_VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Load 1password secrets
        uses: 1password/load-secrets-action@v1
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          DOCKER_USERNAME: "op://elon-gpt/github-secrets/DOCKER_USERNAME"
          DOCKER_PASSWORD: "op://elon-gpt/github-secrets/DOCKER_PASSWORD"
          REMOTE_HOST: "op://elon-gpt/github-secrets/REMOTE_HOST"
          REMOTE_USER: "op://elon-gpt/github-secrets/REMOTE_USER"
          SSH_PRIVATE_KEY: "op://elon-gpt/github-secrets/SSH_PRIVATE_KEY"

          OPENAI_API_KEY: "op://elon-gpt/.env.production/OPENAI_API_KEY"
          OPENAI_MODEL: "op://elon-gpt/.env.production/OPENAI_MODEL"
          DISCORD_TOKEN: "op://elon-gpt/.env.production/DISCORD_TOKEN"
          CMC_PRO_API_KEY: "op://elon-gpt/.env.production/CMC_PRO_API_KEY"
          BACKEND_API_URL: "op://elon-gpt/.env.production/BACKEND_API_URL"
          BACKEND_API_KEY: "op://elon-gpt/.env.production/BACKEND_API_KEY"
          OLLAMA_SERVER: "op://elon-gpt/.env.production/OLLAMA_SERVER"
          OLLAMA_MODEL: "op://elon-gpt/.env.production/OLLAMA_MODEL"
          KLIKR_API_KEY: "op://elon-gpt/.env.production/KLIKR_API_KEY"
          KLIKR_API_URL: "op://elon-gpt/.env.production/KLIKR_API_URL"
          ADMIN_USER_ID: "op://elon-gpt/.env.production/ADMIN_USER_ID"
          UTILS_API_URL: "op://elon-gpt/.env.production/UTILS_API_URL"
          UTILS_API_KEY: "op://elon-gpt/.env.production/UTILS_API_KEY"

      - name: Deploy to remote server
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            docker pull ${{ env.DOCKER_USERNAME }}/elongpt-v2:${{ env.TAG_VERSION }}
            docker rm -f elongpt-bot || true
            docker run -d -t \
              -e OPENAI_API_KEY="${{ env.OPENAI_API_KEY }}" \
              -e OPENAI_MODEL="${{ env.OPENAI_MODEL }}" \
              -e DISCORD_TOKEN="${{ env.DISCORD_TOKEN }}" \
              -e CMC_PRO_API_KEY="${{ env.CMC_PRO_API_KEY }}" \
              -e BACKEND_API_URL="${{ env.BACKEND_API_URL }}" \
              -e BACKEND_API_KEY="${{ env.BACKEND_API_KEY }}" \
              -e OLLAMA_SERVER="${{ env.OLLAMA_SERVER }}" \
              -e OLLAMA_MODEL="${{ env.OLLAMA_MODEL }}" \
              -e KLIKR_API_KEY="${{ env.KLIKR_API_KEY }}" \
              -e KLIKR_API_URL="${{ env.KLIKR_API_URL }}" \
              -e ADMIN_USER_ID="${{ env.ADMIN_USER_ID }}" \
              -e UTILS_API_URL="${{ env.UTILS_API_URL }}" \
              -e UTILS_API_KEY="${{ env.UTILS_API_KEY }}" \
              --restart always \
              --name elongpt-bot \
              "${{ env.DOCKER_USERNAME }}/elongpt-v2:${{ env.TAG_VERSION }}"
